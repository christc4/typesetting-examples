


BOOTS.DOC -- Changes from V22(104) to V22(105)
August 1978






























COPYRIGHT (C) 1971,1975,1978 BY
DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.


THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED
ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE
INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER
COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY
TRANSFERRED.

THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE
AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT
CORPORATION.

DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE OR  RELIABILITY  OF  ITS
SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
BTS22.DOC                                                       Page 2


BOOTS.DOC -- Changes from V22(104) to V22(105)
August 1978



1.0  SUMMARY

The main reason for this release is to fix 2 bugs in V22(104).



2.0  EXTERNAL CHANGES

None.



3.0  Known bugs and deficiencies

If BOOTS is assembled for the KL10 with FT22BIT turned on, the version
which  is  written  onto  disk  packs  will  go into a page fault loop
whenever the monitor reads it to do an auto  dump/reload  sequence  if
the CCL text at BOOTXT in COMMON crosses a page boundry.



4.0  INSTALLATION INSTRUCTIONS

None.



5.0  INTERNAL CHANGES

A bug in V22(104) which could cause BOOTS to hang, without ever typing
its  prompt,  when the KL10 was just powered up has been fixed.  A bug
has been fixed which would cause BOOTS not to be able to read from  an
RH20 after a data error on that controller.



6.0  SUGGESTIONS

None.



[End of BTS22.DOC]

[BTS22.DOC is appended as an integral part of BTS22.DOC]
BTS22.DOC                                                       Page 3


BOOTS.DOC -- Changes from V21C to V22(104)
March 1977



1.0  SUMMARY

The main reason for this release of BOOTS is to fix a bug  in  version
21  which  caused  BOOTS  to have to be restarted under certain errors
which can occur on an RP04/RP06.



2.0  EXTERNAL CHANGES

Paper-tape BOOTS (or  the  version  gotten  by  loading  it  from  the
front-end  of a KL10) now starts by typing its version number.  Before
every command line is asked for BOOTS  now  types  a  prompt  "<BTS>",
which  indicates that it is ready for a command.  Paper-tape BOOTS can
now be assembled so that it will work on either an RH10  or  an  RH20.
The  BOOTS  which  is  distributed on the KL10 front-end tape has been
assembled to work on either.  The names  of  the  bootstraps  are  now
BT128K and BT256K, for use on a 128K or 256K KL10.

Note that the BOOTS which is written on blocks 4-7 of a disk pack does
not  have these changes, it still must be assembled for either an RH10
or RH20, and will not work on the "wrong" one.  Neither does  it  type
its version number nor prompt before each command.



3.0  KNOWN BUGS AND DEFICIENCIES

If BOOTS is assembled for the KL10 with FT22BIT turned on, the version
which  is  written  onto  disk  packs  will  go into a page fault loop
whenever the monitor reads it to do an auto  dump/reload  sequence  if
the CCL text at BOOTXT in COMMON crosses a page boundary.



4.0  INSTALLATION INSTRUCTIONS

None.



5.0  INTERNAL CHANGES

A bug in version 21C, distributed with the 6.02A combined  LIR,  which
made  it necessary to type the structure name as well as the file name
has been fixed.  If an RP04/RP06 is disabled and then  enabled,  BOOTS
will still be able to read from it without restarting.
BTS22.DOC                                                       Page 4


6.0  SUGGESTIONS

None.



[End of BTS22.DOC]

[BTS21C.DOC is appended as an integral part of BTS22.DOC]
BTS21C.DOC                                                      Page 5


BOOTS.DOC -- Changes from V21 to V21C
October 1976



1.0  SUMMARY

The main reasons for this release of BOOTS are to  support  the  1088,
RP06, and RH20 LIRs.



2.0  EXTERNAL changes

Since BOOTS V21C will support either an RH10 or an RH20 but not  both,
a  new  set of .A10, .CCL, and .CMD files are being distributed on the
KL10 front end bootstrap tape.  These files are:

     B11281.CMD     Load   micro-code,   configure   memory   1    way
                    interleaved,   configure  cache,  load  and  start
                    RSX10-F and 128K RH10 BOOTS.

     B11282.CMD     Load   micro-code,   configure   memory   2    way
                    interleaved,   configure  cache,  load  and  start
                    RSX10-F and 128K RH10 BOOTS.

     B11284.CMD     Load   micro-code,   configure   memory   4    way
                    interleaved,   configure  cache,  load  and  start
                    RSX10-F and 128K RH10 BOOTS.

     B21281.CMD     Load   micro-code,   configure   memory   1    way
                    interleaved,   configure  cache,  load  and  start
                    RSX10-F and 128K RH20 BOOTS.

     B21282.CMD     Load   micro-code,   configure   memory   2    way
                    interleaved,   configure  cache,  load  and  start
                    RSX10-F and 128K RH20 BOOTS.

     B21284.CMD     Load   micro-code,   configure   memory   4    way
                    interleaved,   configure  cache,  load  and  start
                    RSX10-F and 128K RH20 BOOTS.

     B12561.CMD     Load   micro-code,   configure   memory   1    way
                    interleaved,   configure  cache,  load  and  start
                    RSX10-F and 256K RH10 BOOTS.

     B12562.CMD     Load   micro-code,   configure   memory   2    way
                    interleaved,   configure  cache,  load  and  start
                    RSX10-F and 256K RH10 BOOTS.

     B12564.CMD     Load   micro-code,   configure   memory   4    way
                    interleaved,   configure  cache,  load  and  start
                    RSX10-F and 256K RH10 BOOTS.
BTS21C.DOC                                                      Page 6


     B22561.CMD     Load   micro-code,   configure   memory   1    way
                    interleaved,   configure  cache,  load  and  start
                    RSX10-F and 256K RH20 BOOTS.

     B22562.CMD     Load   micro-code,   configure   memory   2    way
                    interleaved,   configure  cache,  load  and  start
                    RSX10-F and 256K RH20 BOOTS.

     B22564.CMD     Load   micro-code,   configure   memory   4    way
                    interleaved,   configure  cache,  load  and  start
                    RSX10-F and 256K RH20 BOOTS.


     BT1281.CCL     Load and start RSX10-F and 128K RH10 BOOTS.

     BT1282.CCL     Load and start RSX10-F and 128K RH20 BOOTS.

     BT2561.CCL     Load and start RSX10-F and 256K RH10 BOOTS.

     BT2562.CCL     Load and start RSX10-F and 256K RH20 BOOTS.


     BT1281.A10     128K RH10 BOOTS.

     BT1282.A10     128K RH20 BOOTS.

     BT2561.A10     256K RH10 BOOTS.

     BT2562.A10     256K RH20 BOOTS.



3.0  KNOWN BUGS AND DEFICIENCIES

None.



4.0  INSTALLATION INSTRUCTIONS

None.
BTS21C.DOC                                                      Page 7


5.0  INTERNAL changes

A new feature test switch has been added FTRH20  which  defaults  off.
If  this  feature  test  switch  is  turned  on, BOOTS will be able to
load/dump from/to an RH20 control/channel.  However, it will no longer
be  able  to  operate  an  RH10  controller  (See  section  3 for more
details).  Also, BOOTS has been changed to support loading and dumping
from/to  RP06  packs.   Finally,  to  implement 1088 and RH20 support,
BOOTS  V21C  uses  exec  page  table  relative  addressing   for   DTE
communications  rather  than  page  0  communications locations.  This
requires that MON.BIN (V5A or later) and KLDCP (V11 or later) be  used
with  BOOTS  V21C.   These  files  are  included on the KL10 front end
DECtape distributed with the LIRs.



[End of BTS21C.DOC]

[BTS21.DOC is appended as an integral part of BTS21C.DOC]
BTS21.DOC                                                       Page 8


BOOTS.DOC -- Changes from V20 to V21
October 1975



1.0  SUMMARY

The main purpose of this release of BOOTS is to fix a bug  in  version
20  of  BOOTS which caused it to go into a page fault loop when loaded
by the 6.02 monitor on a KI10 if the feature test  switch  FT22BIT  is
turned  off in BOOTS.  Version 21 also supports loading and dumping on
a KL10 with more than 256K of memory, and,  with  this  version,  auto
dump/reload wfile no longer apply.



5.0  EXTERNAL CHANGES

None.



[End of BTS21.DOC]

[BTS20.DOC is appended as an integral part of BTS21.DOC]
BTS20.DOC                                                       Page 9


BOOTS.DOC -- Changes from V17 to V20
July 1975



1.0  SUMMARY

A number of feature test switches have been incorporated into BOOTS in
order  that  it  may  support bootstraping from and dumping to several
devices from files in SAV and/or EXE format on  KA10,  KI10,  or  KL10
processors.   In  particular, with version 20 it is possible to make a
paper tape BOOTS which in addition to supporting the  KL10  processor,
can  read/write  SAV or EXE files from/to RM10B's, RD10s, RP02s, RP03s
and RP04s.  It is also possible to make a BOOTS  to  be  written  onto
disk  packs  by WTBOOT which is capable of dumping up to 4096K of core
on KI10 or KL10 based systems (the 6.02 monitor is required  for  this
feature).   Also, BOOTS has been changed to display a fixed error code
between 1 and 16 in the lights (type the letters B through  O  on  the
operator console of the KL10) whenever it encounters an error while it
is loading or dumping.



2.0  EXTERNAL CHANGES

BOOTS must be assembled  with  the  appropriate  feature  test  switch
settings  to produce a BOOTS.REL file to be loaded with WTBOOT to take
advantage of features which are available in BOOTS but which  are  not
normally  turned  on.   The  paper  tape version of BOOTS is now three
pages (page=512 words) long (2 code pages and a data page) so  dumping
crashes  with paper tape BOOTS is not recommended if it can be avoided
since an additional page of information which would be dumped  by  the
BOOTS  read  from  a  disk  pack  will  be  lost.   BOOTS displays the
following error codes in the lights (or types the specified letter  on
the  KL10)  to  indicate  what  specific  problem it encountered while
reading or writing.
BTS20.DOC                                                      Page 10


      ERROR CODE    ERROR        MEANING
     DISPLAYED IN   LETTER
      THE LIGHTS

          1           B     NO COMMA INSIDE []
          2           C     ILLEGAL SWITCH OR NO START ADDRESS
                            SPECIFIED BEFORE /G
          3           D     INPUT ERROR
          4           E     INPUT ERROR READING THE EXE DIRECTORY
          5           F     FIRST PAGE OF THE FILE ISN'T AN EXE
                            DIRECTORY OR IS AN EXE DIRECTORY WHICH IS
                            TOO LONG
          6           G     PAGES DESCRIBED IN THE EXE DIRECTORY
                            AREN'T MONOTONICALLY INCREASING
          7           H     PREMATURE END OF FILE
         10           I     OUTPUT ERROR
         11           J     FILE NOT FOUND
         12           K     BAD RIB
         13           L     PREMATURE END OF FILE READING THE UFD
         14           M     ATTEMPT TO READ/WRITE BLOCK 0
         15           N     LOGICAL BLOCK NUMBER EXCEEDS SIZE OF THE
                            DISK
         16           O     END OF FILE ON OUTPUT



3.0  KNOWN BUGS AND DEFICIENCIES

None.



4.0  INSTALLATION INSTRUCTIONS

See WTB4.DOC.



5.0  INTERNAL CHANGES

There are now 10 feature test switches in BOOTS.  For the  purpose  of
making  a paper tape version of BOOTS, these feature test switches can
be ignored.  However, to make a BOOTS.REL which is to be  loaded  with
WTBOOT  to write BOOTS on blocks 4-7 of disk packs, it is necessary to
turn off some of the switches.  The feature test  switches  which  are
currently implemented in BOOTS are:

     FTKA10,   include support for KA10 processors
     FTKI10,   include support for KI10 processors
     FTKL10,   include support for KL10 processors
     FTSAVE,   include support for SAV files
     FTEXE,    include support for EXE files
     FTFHD,    include support for RM10Bs and RD10s
     FTDPC,    include support for RP02s and RP03s
     FTDHX,    include support for RP04s
BTS20.DOC                                                      Page 11


     FT22BIT,  include support for dumping more than 256K
     FTWTBOOT, assemble BOOTS to be loaded with standard (field image)
               WTBOOT.   Defaults  to on and would normally be on when
               configuration dependent BOOTS.REL files are produced to
               be loaded with WTBOOT.

In the paper tape version of BOOTS, all  of  the  above  feature  test
switches  (except  FT22BIT) are normally turned on so paper tape BOOTS
will support reading/writing both SAV and EXE format files from/to any
supported device on a KA10, KI10 or KL10 processor.  See BOOTS.MEM for
assembly instructions for producing a paper tape version of BOOTS.

In general, it is not possible to assemble BOOTS to load  with  WTBOOT
such  that  it will support EXE files and more than one type of device
and still have it be small enough to fit on blocks 4-7 of a disk pack.
Therefore,  the  BOOTS  configuration which will most commonly be used
should be assembled and loaded with WTBOOT and  written  on  all  disk
packs,  e.g.,  RP02/RP03  BOOTS  should be written on all packs if the
monitor is normally on an RP02/RP03  pack  and  crashes  are  normally
dumped on CRASH.SAV or CRASH.EXE on an RP02/RP03 pack.



[End of BTS20.DOC]

[BTS17.DOC is appended as an integral part of BTS20.DOC]
BTS17.DOC                                                      Page 12


BOOTS.DOC -- Changes from V16 to V17
January 1975



1.0  SUMMARY

BOOTS version 17 supports RP04's.  However, to keep the size of  BOOTS
under  1K, something else had to go.  The choice was to put fixed head
disk support (RC10, RM10B) under a conditional  assembly  switch.   If
FTFHD=-1  (the default value), then BOOTS will talk to RC10's, RP02's,
and RP03's (but NOT RP04's).  If FTFHD=0, then BOOTS talks to  RP02's,
RP03's, and RP04's (but NOT RC10's).

BOOTS version 17 supersedes all previous versions of BOOTS.



2.0  EXTERNAL CHANGES

BOOTS can now access RP04's.   All  commands  and  operator  interface
remain unchanged.



3.0  KNOWN BUGS AND DEFICIENCIES

BOOTS will only dump or load the first 255K of physical core.  This is
true even if 4096K exist.

BOOTS may not correctly dump into a file which is on a multi-unit file
structure if the file is split across units.

BOOTS still does not support the RS04.

A self-relocating paper tape version is still  recognized  as  a  good
idea, but has not been implemented.



4.0  INSTALLATION INSTRUCTIONS

Since the default value of FTFHD produces BOOTS without RP04  support,
one  must  assemble  BOOTS  with a parameter file defining FTFHD==0 to
obtain an RP04 BOOTS.  The version of WTBOOT.CTL which accompanies the
RP04  LIR  contains the command sequence to accomplish this.  It is as
follows:
BTS17.DOC                                                      Page 13


     .MAKE BPARAM.MAC
     *I FTFHD==0
     *$EX$$
     .COMPILE BPARAM+BOOTS

The installation instructions for paper tape  versions  of  BOOTS  are
similarly affected.  See BOOTS.CTL and WTBOOT.CTL.



5.0  INTERNAL CHANGES

The only internal changes are the definitions of the  FTFHD  and  FTDH
feature  test  switches and the use of these switches to conditionally
assemble either the existing code for fixed head disks or the new code
which handles RP04's.



[End of BTS17.DOC]

[BTS16.DOC is appended as an integral part of BTS17.DOC]
BTS16.DOC                                                      Page 14


BOOTS.DOC -- Changes from V15 to V16
January 1974


1.0  SUMMARY

This release adds 3 new features for 5.07/6.01:

     1.  BOOTS now supports up to 4096K  memory  using  the  DF10C  in
         22-bit mode.

     2.  BOOTS may be given a command string by storing a byte pointer
         to  the  string  in  location  777  relative  to the starting
         address of BOOTS.  This lets the monitor reload itself.

     3.  BOOTS stores the serial number of the CPU in low core.   This
         allows a 1077 monitor to use the same CPU as the master.

BOOTS version 16 supersedes all  previous  versions  of  BOOTS.   This
version supports the DATE75 project.



2.0  EXTERNAL CHANGES

None.



3.0  KNOWN BUGS AND DEFICIENCIES

BOOTS will only dump or load the first 255K of physical core.  This is
true even if 4096K exist.

BOOTS may not correctly dump into a file which is on a multi-unit file
structure if the file is split across units.

BOOTS does not support the RS04 or RP04.



4.0  INSTALLATION INSTRUCTIONS

None.


5.0  INTERNAL CHANGES

None


[End of BTS16.DOC]

[BTS15.DOC is appended as an integral part of BTS16.DOC]
BTS15.DOC                                                      Page 15


BOOTS.DOC -- Changes from V13 to V15
March 1972


1.0  SUMMARY

This release enables BOOTS to service RP03 disk  drives.   Version  15
does  not  support RP01's.  No bugs have been reported to the released
version 13.



2.0  EXTERNAL CHANGES

None.



3.0  KNOWN BUGS AND DEFICIENCIES

RP01 drives no longer supported.  In the  future  make  a  paper  tape
bootstrap  loader  which determines how big memory is so can have only
one size for paper tape too.  Version 15  still  requires  a  separate
assembly for each size paper tape version.



4.0  INSTALLATION INSTRUCTION CHANGES

None.



5.0  INTERNAL CHANGES

All references to RP01 drives have  been  removed.   Bit  R.TYPE=1  in
AC(F) now means drive is RP03 if RP10 controller, instead of RP01.



[End of BTS15.DOC]

[BTS13.DOC is appended as an integral part of BTS15.DOC]
BTS13.DOC                                                      Page 16


BOOTS.DOC -- Changes from V4 to V13
April 1971


1.0  SUMMARY

This release adds a few new features to  BOOTS.   No  bugs  have  been
reported to the released version 4.  BOOTS is now location independent
so that a single copy can be written on a disk and loaded into the top
of memory no matter how big memory is.  BOOTS now prints ?  as well as
bell on all errors.  BOOTS indicates the type of error  by  displaying
in  the  lights an error PC.  See new, faster monitor crash proecdures
in 5.03 monitor release.  See also WTBOOT writeup available with  5.03
release.   WTBOOT  is a program to write BOOTS onto blocks 4 through 7
of disk packs.



2.0  EXTERNAL CHANGES

Whenever an error occurs, BOOTS types both a bell and a ?  followed by
a  carriage  return  line-feed.   It also displays the error PC in the
lights.  The error PCs are as follows:

     XXX061 no comma inside [ ]'s
     XXX131 on /G no starting address specified previously
     XXX134 not a legal command or decimal number
     XXX151 file not found on /L or cr command
     XXX173 data error on read
     XXX201 file not found on /D
     XXX236 data error on write
     XXX305 bad RIB
     XXX326 RIB does not have code word 777777
     XXX334 premature EOF reading RIB
     XXX622 attempt to read block 0
     XXX713 logical block number exceeds size of disk



3.0  KNOWN BUGS AND DEFICIENCIES

None.  For future make a paper tape bootstrap loader which  determines
how  big  memory  is  so  can  have  only one size for paper tape too.
Version 12 still requires a separate assembly for each size paper tape
version.
BTS13.DOC                                                      Page 17


4.0  INSTALLATION INSTRUCTIONS

To make a location independent version to be loaded  with  WTBOOT  for
purposes  of  writing  it  onto  blocks  4 through 7 of disk packs, no
special assembly instruction are needed.

     .COM BOOTS

See WTBOOT.DOC for loading instructions for WTBOOT.

To make an absolute paper tape version, define core to be:

     40000  for 16K
     100000 for 32K
     140000 for 48K
     200000 for 64K
     240000 for 80K
     300000 for 96K, etc

     .MAKE FTBOOT.MAC
     ICORE=240000
     $$
     EX$$
     .R MACRO
     PTP:_FTBOOT,BOOTS



5.0  INTERNAL CHANGES

All references to locations in BOOTS are indexed by register  R  which
is loaded up with the lowest address of BOOTS data area.



[End of BTS13.DOC]
