!DFCIB.HLP  Online help file for DFCIB version 2(16) updated 22-Aug-85
!
!Each DFCIB command has  an entry in this  file.  The entries must  be
!alphabetically ordered and must be preceded with an "*" in column  1.
!Comments have a "!" in column 1.  Additional entries may be added  to
!this help file, but care must be taken to follow the above.

Help for a specific command may be obtained with the HELP command as
follows:

        HELP command-name

For instance if you wish additional information about the TAKE command
you would type "HELP TAKE".

*ACCEPT

The ACCEPT command is used only for writing your own tests.  It causes
a connection to be accepted from another exerciser program.

*BUILD

BUILD is a command  used only for writing  your own tests.  It  allows
the building  of CTP  packets for  later transmission  using the  SEND
command.

*CLEAR

The CLEAR command  is the  complement of  the SET  command.  For  more
information, enter one of the following:

	HELP CLEAR LOGGING
	HELP CLEAR SWITCH

*CLEAR LOGGING

The CLEAR LOGGING  command is  used to close  the log  file, which  is
opened by the SET  LOGGING command.  The log  file receives a copy  of
all output directed to the terminal.

*CLEAR SWITCH

The CLEAR SWITCH command is used to clear one or more of the switches.
It is the complement  of the SET SWITCH  command.  The current  switch
settings are displayed with the  SHOW SWITCHES command.  The  switches
are:

	BELL	Ring the terminal bell on errors.
	HALT	Stop testing when any error is detected.
	PALL	Print all bytes in buffer (TYPE command).
	TRACE	Print trace messages as each test is executed.

*CONNECT

The CONNECT  command is  used only  for writing  your own  tests.   It
causes a  connection to  be made  to the  last node  specified in  the
SELECT command.

*DDT

The DDT command  is used  only for  debugging of  the diagnostic.   It
causes execution to be transferred to DDT if it is loaded.  If DDT  is
not loaded it attempts to load it.

*DESELECT

The DESELECT  command is  used  to disable  selection  of a  node  for
testing.  Is  is  followed  by  one  or  more  decimal  node  numbers,
separated by commas.   To see what  nodes are selected,  use the  SHOW
SELECTED-NODES command.

*DISCONNECT

The DISCONNECT command is  used only for writing  your own tests.   It
causes the connection created by the CONNECT command to be broken.

*DESELECT

The DESELECT  NODE  command  is  the complement  of  the  SELECT  NODE
command.  It is followed by one or more decimal node numbers separated
by  commas.   To   see  what   nodes  are  selected,   use  the   SHOW
SELECTED-NODES command.

*HELP

The HELP command followed by question mark (?)  will provide the  user
with a list of the entries in the online help file.  HELP followed  by
the subject will provide the user with a short message on the selected
subject.  Help with no subject specified will provide the user with  a
help message on using the HELP command.

*LISTEN

The LISTEN command is used only for writing your own tests.  It causes
the program to listen for a CTP connection from any node.

*MAP-BUFFER

The MAP-BUFFER command is  used only for writing  your own tests.   It
causes a map of an internal buffer of the number of bytes specified in
the command.

*PAUSE

The PAUSE command is normally used only for a writing your own  tests.
It causes the program to sleep for the number of seconds furnished  in
the command.

*QUIT

The QUIT command causes the diagnostic to exit.

*READ

The READ  command is  used only  for writing  your own  tests.  It  is
followed by  a  keyword,  DATAGRAM or  MESSAGE,  indicating  the  read
action.

*REQUEST-DATA

The REQUEST-DATA command is  normally used only  for writing your  own
tests.  It  is  used  to  request DMA  transfer  data  from  either  a
RESPONDER-NODE or an EXERCISER-NODE, as specified in the command.

*REQUEUE

The REQUEUE command is normally used only for writing your own  tests.
It causes a buffer used by the  READ command to be freed up for  later
use.

*RETURN-MESSAGE

The RETURN-MESSAGE command is  used only for  writing your own  tests.
It causes the diagnostic  to return a message  as a responder  program
would.

*RUN

The RUN command is used to start  the execution of a test or group  of
tests.  The format of the RUN command is:

	RUN /PASSES:n test/ITERATIONS:n , test/ITERATIONS:n

The optional /PASSES switch  must be specified  before any test  name,
and specifies how many passes of the test to run.  The default  number
of passes if /PASSES isn't specified is 1.

A test name or test script come next, separated by commas.  Each  test
may be  execute  a number  of  times using  the  optional  /ITERATIONS
switch.  The  default  number  of  iterations is  1,  except  for  the
EXERCISER and TST99, for which the default iteration count is 100.

A RUN command with no arguments is used to rerun the last successfully
entered RUN command.  The tests are  stored in the "run table",  which
can be displayed using the SHOW RUN-TABLE command.

An example run command would be

DFCIB>RUN /PASSES:100 BASIC/ITER:10, MESSAGE/ITER:5, COUNTER

This would  run  100 passes,  where  each  pass would  consist  of  10
iterations of the Basic Connect/Disconnect Tests, 5 iterations of  the
Message Tests, followed by one iteration of the Counter Test.

During the execution  of a test,  you can  get status of  the test  or
abort testing by using the "run time commands".  The run time  command
options are:

	H    For this message
	S    To get current test status
	T    To toggle the TRACE switch
	esc  Escape to abort testing

For more help with the scripts,  type HELP followed by a script  name,
one of the following:

 ALL-TESTS	 BASIC-TESTS	  BUFFER-TESTS	   COUNTER-TEST
 DATA-TESTS	 DEFAULT	  EXERCISER	   MESSAGE-TESTS

For more help with the tests, type  HELP followed by a test name,  one
of the following:

 TST01	 TST02	  TST10	   TST11    TST12    TST13    TST14    TST30
 TST31	 TST32	  TST33	   TST40    TST50    TST51    TST52    TST53
 TST54	 TST55	  TST56	   TST57    TST58    TST59    TST80    TST99

*SELECT

The SELECT command is used  to select a node  for CTP testing.  It  is
followed by node numbers separated by commas.  The selected nodes  are
displayed with the SHOW SELECTED-NODES command.

*SET

The SET command is used to activate various program options.  For more
information, type one of the following:

	HELP SET LOGGING
	HELP SET PATH-SELECTION
	HELP SET SWITCH
	HELP SET TIME-OUT
	HELP SET TYPE-OUT-LINE-LIMIT

*SET LOGGING

The SET  LOGGING command  is followed  by a  filename into  which  all
terminal output is placed.  The default filename is DSK:DFCIB.LOG.  To
close the log file, either exit  the diagnostic with the QUIT  command
or use the CLEAR LOGGING command.

*SET PATH-SELECTION

The SET PATH-SELECTION command is used  to select either Path A,  Path
B, or automatic path selection for  all CTP packets sent over the  CI.
The default is  to use automatic  path selection, which  will let  the
monitor pick the path to use, causing CTP packets to be split more  or
less evenly across both paths.

*SET SWITCH

The SET SWITCH command is used to set one or more of the switches.  It
is the complement  of the  CLEAR SWITCH command.   The current  switch
settings are displayed with the  SHOW SWITCHES command.  The  switches
are:

	BELL	Ring the terminal bell on errors.
	HALT	Stop testing when any error is detected.
	PALL	Print all bytes in buffer (TYPE command).
	TRACE	Print trace messages as each test is executed.

*SET TIME-OUT

The SET TIME-OUT command is followed by the maximum number of  seconds
to wait for any event to complete.  The default time out is 5 seconds.
The SHOW TIME-OUT  command is  used to  display the  current time  out
value.

*SET TYPE-OUT-LINE-LIMIT

The SET TYPE-OUT-LINE-LIMIT command is used to set the number of lines
that are displayed with  the TYPE command.  The  TYPE command is  only
used for writing your own tests.

*SHOW

The SHOW command  is used  to display various  program settings.   For
more information type HELP SHOW followed by one of:

 ALL				 CI-CONFIGURATION
 COUNTERS			 EVENT-QUEUE
 ID-OF-CONNECTED-NODE		 LOCAL-NODE-NUMBER
 MAPPED-BUFFER-NAME		 MINIMUM-BUFFER-SIZES
 PATH-STATUS-OF-NODE		 POLL-STATUS-OF-CONNECTED-NODE
 RUN-TABLE			 SELECTED-NODES
 STATUS-OF-CONNECTED-NODE	 SWITCHES
 TIME-OUT

*SHOW ALL-PROGRAM-PARAMETERS

The SHOW  ALL-PROGRAM-PARAMETERS command  does the  equivalent of  the
following SHOW commands:

	LOCAL-NODE-NUMBER
	PATH-SELECTION
	SELECTED-NODES
	TIME-OUT
	RUN-TABLE
	SWITCHES

The other  SHOW commands  have to  do with  writing your  own test  or
getting status  of this  node or  other  nodes on  the CI.   For  more
information, type HELP SHOW followed by one of the commands.

*SHOW CI-CONFIGURATION

The SHOW CI-CONFIGURATION command will  request connect data from  all
other nodes on the CI and  display various node-specific data such  as
software type and versions, buffer sizes, and so on.

*SHOW COUNTERS

The SHOW COUNTERS function will cause the CI port counters to be  read
and displayed for this node on the CI.

*SHOW EVENT-QUEUE

The SHOW EVENT-QUEUE command is used only when writing your own  tests
and shows the status of the  event queue for the connection made  with
the ACCEPT or CONNECT commands.

*SHOW ID-OF-CONNECTED-NODE

The SHOW ID-OF-CONNECTED-NODE  command is used  only for writing  your
own tests and  shows the  connect ID of  the node  connected with  the
CONNECT or LISTEN commands.

*SHOW LOCAL-NODE-NUMBER

The SHOW LOCAL-NODE-NUMBER shows  the CI node  number assigned to  the
system the diagnostic is running on.

*SHOW MAPPED-BUFFER-NAME

The SHOW MAPPED-BUFFER-NAME command is used only for writing your  own
tests and  is  used  to  display  the  buffer  name  returned  by  the
MAP-BUFFER command.

*SHOW MINIMUM-BUFFER-SIZES

The SHOW MINIMUM-BUFFER-SIZES command shows what monitor determines is
the minimum buffer sizes for datagram and messages.

*SHOW PATH-SELECTION

The SHOW  PATH-SELECTION command  will display  what paths  have  been
selected with the SET PATH-SELECTION command.

*SHOW PATH-STATUS-OF-NODE

The SHOW PATH-STATUS-OF-NODE command, followed by a node number, shows
what monitor determines is the current status of paths to that node.

*SHOW POLL-STATUS-OF-CONNECTED-NODE

The  SHOW  POLL-STATUS-OF-CONNECTED-NODE  command  is  used  only  for
writing your  own tests.   It shows  what monitor  knows as  the  poll
status of the currently connected node.

*SHOW RUN-TABLE

The SHOW RUN-TABLE command  is used to display  what tests or  scripts
have been run with the last  RUN command.  This list of  tests/scripts
will be used  if another RUN  command is given  with no  tests/scripts
specified.  Type HELP RUN for more details.

*SHOW SELECTED-NODES

The SHOW SELECTED-NODES command  displays which nodes  on the CI  have
been selected for testing.   Nodes are selected  for testing by  using
the SELECT NODE command and are  removed from testing by the  DESELECT
NODE command.

*SHOW STATUS-OF-CONNECTED-NODE

The SHOW STATUS-OF-CONNECTED-NODE command is used for writing your own
tests.  It displays the status of the connection made with the CONNECT
or LISTEN commands.

*SHOW SWITCHES

The SHOW SWITCH command is used  to display the switch settings.   The
SET SWITCH command is used  to set one or  more of the switches.   The
CLEAR SWITCH command is used to clear switches.  The switches are:

	BELL	Ring the terminal bell on errors.
	HALT	Stop testing when any error is detected.
	PALL	Print all bytes in buffer (TYPE command).
	TRACE	Print trace messages as each test is executed.

*SHOW TIME-OUT

The SHOW TIME-OUT command  is used to display  the time in seconds  to
wait for any event  to complete.  The default  time out is 5  seconds.
The SET TIME-OUT command is used to change the current time out value.

*TAKE

The TAKE command is used to cause  a file of commands to be passed  to
the program.  The default filename  is DSK:DFCIB.CMD.  For example  if
the following commands were in a file called TEST15.CMD:

SELECT NODE 15
SET LOGGING TEST15.LOG
RUN/PASS:3 BUFFER-TESTS/ITER:10,COUNTER-TEST
QUIT

The command TAKE TEST15 would cause node 15 to be selected, a log file
called TEST15.LOG be opened, three passes of the specified tests to be
run, and the program to exit.

*TYPE

The TYPE command is used for  writing your own tests.  It is  followed
by one of the following to display the contents of program buffers:

 CTPPKT		   DBUF1	      DBUF2
 DBUF3		   DBUF4	      DBUF5
 DBUF6		   MAPPED-BUFFER      MBUF1
 MBUF2		   MBUF3	      MBUF4
 MBUF5		   MBUF6	      RETURNED-BUFFER
 SAVCTP		   SAVREQ	      SAVRSP
 SAVSCS		   SCSCMD	      SCSEVT
 SCSRSP		   SCSSAV

*WAIT

The WAIT command used only for writing your own tests.  It is used  to
wait for one of the following:

CONNECTION-STATUS STATE, one of the following:
 ACCEPT-REQUEST-SENT		  CLOSED
 CONNECT-REQUEST-RECEIVED	  CONNECT-REQUEST-SENT
 CONNECT-RESPONSE-RECEIVED	  CONNECTION-IS-OPEN
 DISCONNECT-REQUEST-RECEIVED	  DISCONNECT-REQUEST-SENT
 DISCONNECT-RESPONSE-RECEIVED	  LISTENING
 REJECT-REQUEST-SENT		  WAITING-FOR-DISCONNECT-RESPONSE

CONNECTION-STATUS FLAG, of one of the following:
 DATAGRAM-AVAILABLE-FLAG   DMA-TRANSFER-COMPLETE
 EVENT-PENDING-FLAG	   MESSAGE-AVAILABLE-FLAG

EVENT-STATUS, one of the following:
 CONNECT-TO-LISTEN		  CONNECTION-WAS-ACCEPTED
 CONNECTION-WAS-REJECTED	  CREDIT-IS-AVAILABLE
 LITTLE-CREDIT-LEFT		  MAINT-DATA-XFER-COMPLETE
 MESSAGE-DATAGRAM-SEND-COMPLETE	  NODE-CAME-ONLINE
 NODE-WENT-OFFLINE		  OK-TO-SEND-DATA
 PORT-BROKE-CONNECTION		  REMOTE-INITIATED-DISCONNECT
 VC-BROKEN

!All scripts here
*DEFAULT

The DEFAULT script runs the same tests as the ALL-TESTS script  except
it selects all nodes available for testing first.  Type HELP ALL-TESTS
for a listing of the tests run by that script.

*ALL-TESTS

The ALL-TESTS script runs of the following tests:

	TST01 Connect/Disconnect Test
	TST02 Function Set Request/Response Test
	TST10 Basic Message Test 
	TST11 Message Test Count 4, Four Data Types 
	TST12 Message Test Repeat 3, Four Data Types  
	TST13 Message Test Delay 4, Four Data Types 
	TST14 Message Test Size 1 to Maximum, Four Data Types 
	TST30 Basic Datagram Test  
	TST31 Datagram Test Size 4, Four Data Types  
	TST32 Datagram Test Repeat 3, Four Data Types  
	TST33 Repeat and Delay 4, Four Data Types  
	TST40 Datagram Test Under Message Service  
	TST50 Buffer Map and Buffer Unmap Test 
	TST51 Buffer Map, Controller Read, Buffer Unmap
	TST52 Buffer Map, Buffer Move, Buffer Unmap
	TST53 Buffer Move (Delay 4)
	TST54 Buffer Move (Repeat 3)
	TST55 Buffer Move (Variable Length)  
	TST56 Buffer Move (Size 1) 
	TST57 Buffer Move (Multiple 1) 
	TST58 Buffer Move (Exerciser-Responder Write) HSC50
	TST59 Buffer Move (Exerciser-Responder Write) TOPS-10/20/VMS
	TST80 Read Counter Test  

*BASIC-TESTS

The BASIC-TESTS script runs the following tests:

	TST01 Connect/Disconnect Test
	TST02 Function Set Request/Response Test

*BUFFER-TESTS

The BUFFER-TESTS script runs the following tests:

	TST50 Buffer Map and Buffer Unmap Test 
	TST51 Buffer Map, Controller Read, Buffer Unmap
	TST52 Buffer Map, Buffer Move, Buffer Unmap
	TST53 Buffer Move (Delay 4)
	TST54 Buffer Move (Repeat 3)
	TST55 Buffer Move (Variable Length)  
	TST56 Buffer Move (Size 1) 
	TST57 Buffer Move (Multiple 1) 
	TST58 Buffer Move (Exerciser-Responder Write) HSC50
	TST59 Buffer Move (Exerciser-Responder Write) TOPS-10/20/VMS

*COUNTER-TEST

The COUNTER-TEST script runs the following test:

	TST80 Read Counter Test  

*DATA-TESTS

The DATA-TESTS script runs the following tests:

	TST30 Basic Datagram Test  
	TST31 Datagram Test Size 4, Four Data Types  
	TST32 Datagram Test Repeat 3, Four Data Types  
	TST33 Repeat and Delay 4, Four Data Types  
	TST40 Datagram Test Under Message Service  

*MESSAGE-TESTS

The MESSAGE-TESTS script runs the following tests:

	TST10 Basic Message Test 
	TST11 Message Test Count 4, Four Data Types 
	TST12 Message Test Repeat 3, Four Data Types  
	TST13 Message Test Delay 4, Four Data Types 
	TST14 Message Test Size 1 to Maximum, Four Data Types 

!All tests here
*TST01

TST01 Connect/Disconnect Test: This test will connect to the  selected
node and verify proper status (Event Pending, Connection Accepted, and
Connection Open).  The  test will  then disconnect  from the  selected
node and verify proper status (Connection Closed).

*TST02

TST02 Function Set  Request/Response: This  test will  connect to  the
selected node and verify proper  status.  A Function Set Request  will
be sent and proper status verified.  The Response message is read  and
verified The  test will  then disconnect  from the  selected node  and
verify proper status.

*TST10

TST10 Basic Message Test: This test will connect to the selected  node
and verify  proper status.   A Generate  Message Request  with a  word
count of 0  will be  sent and  proper status  verified.  The  Response
message is read and verified.  The test will then disconnect from  the
selected node and verify proper status.

*TST11

TST11 Message Test  Count 4, Four  Data Types: For  each data type,  a
Generate Message Request with a word  count of 4 and buffer fill  data
of one of the data types will be sent and proper status verified.  The
Response message is read and verified.  The data field is verified.

*TST12

TST12 Message Test  Repeat 3, Four  Data Types: For  each of the  data
types, a Generate Message  request with a word  count of 4 and  buffer
fill data  of the  data  type and  a repeat  count  of 3  (which  will
generate 4 response messages) will be sent and proper status verified.
Each response  message  is  read  and verified.   The  data  field  is
verified.

*TST13

TST13 Message Test  Delay 4,  Four Data Types:  For each  data type  A
Generate Message request with a word  count of 4 and buffer fill  data
and a delay  count of 4  (2 seconds)  will be sent  and proper  status
verified.  The response message is read and verified The data field is
verified as 4 bytes of 375.

*TST14

TST14 Message Test Size 1 to  Maximum, Four Data Types: For each  data
type, a Generate Message  Request with a variable  byte count of 1  to
maximum supported in the responder and  buffer fill data will be  sent
and proper  status  verified.   The Response  messages  are  read  and
verified.  The data field is verified  as the correct number of  bytes
of fill data.

*TST30

TST30 Basic Datagram Test: This test will connect to the selected node
and verify proper  status.  A  Generate Datagram Request  with a  word
count of 0  will be  sent and  proper status  verified.  The  Response
Datagram is read and verified.  The test will then disconnect from the
selected node and verify proper status.

*TST31

TST31 Datagram Test  Size 4, Four  Data Types: For  each data type,  a
Generate Datagram Request with a word count of 4 and buffer fill  data
will be sent  and proper  status verified.  The  Response Datagram  is
read and verified.  The data field is verified.

*TST32

TST32 Datagram Test Repeat 3, Four  Data Types: For each data type,  a
Generate Datagram Request with a byte count of 4 and buffer fill  data
and a repeat  count of 3  (which will generate  4 response  datagrams)
will be sent and  proper status verified.   Each Response Datagram  is
read and verified.  The data field is verified.

*TST33

TST33 Datagram Test Repeat and Delay 4, Four Data Types: For each data
type, a Generate Datagram  Request with a word  count of 4 and  buffer
fill data and a delay count of  4 (2 seconds) will be sent and  proper
status verified.  The  Response Datagram  is read  and verified.   The
data field is verified as 4 bytes of 375.

*TST40

TST40 Datagram Test Under Message Service: A Generate Datagram Request
under Message Service  with a word  count of 26,  buffer fill data  of
201, a delay count of 4 (2 seconds),  and a repeat count of 1 will  be
sent and proper status  verified.  The Response  Datagram is read  and
verified.  The data field is verified  as 4 bytes of 201.  The  ending
response message is read and verified The data field is verified as  4
bytes of 201.

*TST50

TST50 Buffer Map  and Buffer Unmap  Test: A Buffer  Map Request for  a
real buffer with a buffer fill of 377 and a buffer length of 576 bytes
is sent and proper status verified.  The response message is read  and
verified.  A Buffer  Unmap Request  for the  same buffer  is sent  and
proper status is verified.  The Response Message is read and verified.

*TST51

TST51 Buffer Map, Controller Read, Buffer Unmap: For each data type, a
Buffer Map Request for a real buffer  with a buffer fill and a  buffer
length of 4 bytes  is sent and proper  status verified.  The  Response
Message is read and  verified.  An internal buffer  is mapped (in  the
exerciser), and bytes  of 125 are  written into the  buffer.  Data  is
read, and the buffer is verified  to contain bytes of fill data.   The
internal buffer is unmapped.  A Buffer Unmap Request for the responder
buffer is sent and proper status is verified.  The Response Message is
read and verified.

*TST52

TST52 Buffer Map, Buffer Move, Buffer Unmap: A Buffer Map Request  for
a real buffer with a buffer fill of 252 and a buffer length of 4 bytes
is sent and proper status verified.  The Response Message is read  and
verified.  An internal buffer is mapped in the exerciser and bytes  of
125 are written into the buffer.  A Move Buffer Command is issued  for
a responder write of 4  bytes with a delay,  a repeat count, a  packet
multiplier and a packet size of 0 is sent and proper status  verified.
The Response Message is read and verified.  The buffer is verified  to
contain bytes  of 252.   The internal  buffer is  unmapped.  A  Buffer
Unmap Request  for  the same  buffer  is  sent and  proper  status  is
verified, and the Response Message is read and verified.

*TST53

TST53 Buffer Move (Delay  4): This test is  identical to TST53  except
buffer fill data of 371 and delay count of 4 (2 seconds) is used.

*TST54

TST54 Buffer Move (Repeat 3): This  test is identical to TST53  except
buffer fill data  of 370 and  repeat count of  3 (generating 4  buffer
moves) is used.

*TST55

TST55 Buffer  Move  (Variable  Length):  The  following  is  performed
starting with a buffer length of 4 and incrementing the buffer  length
by four  until a  buffer length  of  1024 is  reached.  A  buffer  map
request for a real buffer with a buffer fill of byte pair and a buffer
length of 1024 bytes is sent  and proper status verified The  Response
Message is read and  verified.  Map an internal  buffer 1024 bytes  in
length fill it with bytes of 125.   Issue a Move Buffer Command for  a
responder write of variable length bytes with a delay, a repeat count,
a packet multiplier and a packet size of 0.  Proper status is verified
The Response Message is read and verified.  Verify the buffer contains
byte pair data.  A  Buffer Unmap request for  the same buffer is  sent
and proper  status is  verified.   The response  message is  read  and
verified.  The internal buffer is unmapped.

*TST56

TST56 Buffer Move  (Size 1): A  buffer map request  for a real  buffer
with a buffer fill of 366, a buffer length of 1024 bytes and a  packet
size of 1 is sent and proper status verified.  The response message is
read and verified.  An internal buffer is mapped and filled with bytes
of 125.  A  Move Buffer command  for a responder  write of 1024  bytes
with a delay, a repeat  count, a packet multiplier  of 0 and a  packet
size of 1 is sent and proper status verified.  The Response Message is
read and verified.  The buffer is  verified to contain 366.  A  Buffer
Unmap request  for  the same  buffer  is  sent and  proper  status  is
verified.  The response  message is read  and verified.  The  internal
buffer is unmapped.

*TST57

TST57 Buffer Move (Multiple 1): This test is identical to TST56 except
a packet multiple of 1 is used.

*TST58

TST58 Buffer  Move (Exerciser-Responder  Write): This  test runs  only
against the HSC  responder.  A buffer  map request for  a real  buffer
with a buffer fill of  252 and a buffer length  of 1024 bytes is  sent
and proper status verified The Response Message is read and  verified.
Map first internal buffer in the exerciser and fill with bytes of 125.
A Move Buffer  Request for  an exerciser write  of 1024  bytes with  a
delay, a repeat count, a packet multiplier  and a packet size of 0  is
sent.  Proper  status is  verified The  Response Message  is read  and
verified.  The  first  internal  buffer is  unmapped.   Map  a  second
internal buffer and fill with 0  bytes.  A Move Buffer Request for  an
responder write of 1024 bytes with  a delay, a repeat count, a  packet
multiplier and  a  packet size  of  0  is issued.   Proper  status  is
verified.  The Response Message is  read and verified.  The buffer  is
verified to contain bytes of 125.  A Buffer Unmap Request for the same
buffer is sent and proper status is verified.  The response message is
read and verified.  Unmap the second internal buffer.

*TST59

TST59 Buffer Move (Exerciser-Responder Write): This test will not  run
against the HSC responder.   Map a buffer in  the responder, a  Buffer
Map Request for a real buffer with  a buffer fill of 252 and a  buffer
length of 1024 bytes is sent and proper status verified.  The Response
Message is read and  verified.  Map an internal  buffer of 1024  bytes
and fill with bytes of 125.   Transfer the data to the responder  from
the exerciser.   Test for  data transfer  complete.  Unmap  the  first
internal buffer.   Map a  second internal  buffer fill  with 0  bytes.
Issue a Move Buffer Request for a responder write of 1024 bytes with a
delay, a repeat count, a packet multiplier  and a packet size of 0  is
sent and  proper status  verified  The response  message is  read  and
verified.  Verify the buffer  contains bytes of  125.  A Buffer  Unmap
Request is sent and proper  status is verified.  The Response  Message
is read and verified.

*TST80

TST80 Read Counter Test: This test  will connect to the selected  node
and verify proper status.  A Read Counter Request is issued and proper
status is verified.  The Response  Message is read and verified.   The
number of  acks, nacks  and no  responses for  path A  and path  B  is
printed out along with the number of disregarded datagrams.

*TST99

TST99 CTP  Exerciser: This  test runs  3 iterations  of the  exerciser
sequence while varying the  repeat counts to 2,  32, and 64.  This  is
done to  increase the  amount of  traffic on  the CI.   The  exerciser
sequence utilizes the three basic  methods of transfers (1)  messages,
(2) datagrams, and (3) buffer transfers, to create traffic on the  CI.

The test begins by initializing the test tables and flags and goes  on
to get  configuration data  on all  nodes  on the  CI.  It  uses  this
configuration data and the selected nodes to create selection list for
the exerciser.   Nodes  that  are  selected  but  not  accessible  are
dropped.

The exerciser sequence consists of the following for each node.  If no
/ITERATION switch is specified in the RUN command, then 100 iterations
of the exerciser are performed.  All operations are performed on  each
node before moving to the next item in the list:

      o  Connect to node.
      o  Issue Generate Message Commands of 64 bytes.
      o  Wait for and verify the Generate Message Responses.
      o  Issue Generate Datagram Requests of 20 bytes.
      o  Wait for and verify Generate Datagram Responses.
      o  Map internal buffer, Issue Map Buffer  Request for 64  bytes,
         verify Map Buffer Response.
      o  Issue Move Buffer Request, wait  for  and  verify Move Buffer
         Response.
      o  Verify move buffer data transfers.
      o  Issue Unmap Buffer Request,  verify  Unmap  Buffer  Response,
         Unmap internal buffer.
      o  Disconnect from node.

!End of DFCIB.HLP
 