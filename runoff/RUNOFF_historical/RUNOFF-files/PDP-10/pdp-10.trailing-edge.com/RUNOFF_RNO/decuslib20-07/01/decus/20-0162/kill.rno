.no paging.ap
.c;KILL
.skip 1
 Kill is a program written by Joshua Brodsky for UDC
to delete multiple directories according to a wildcard specification.
Kill was completed 7/14/81. This documentation file corresponds with KILL
version 4A(3), which was last updated 12/23/81.
 Kill accepts the following commands in standard TOPS-20 format:
.SKIP 2
.c;BEGIN (KILLING)
.skip 1
 This causes KILL to start the killing process. Confirmation
with CTRL/Y is required after you type return. Then, a warning notice is output
and killing begins. You can type CTRL/C to get out of KILL in an emergency
before the message "Killing started" appears and no directories will be killed.
.SKIP 2
.c;CONFIRM (MODE)
.skip 1
 This causes KILL to enter a confirmation mode where each directory is listed
and must be confirmed before it is killed.
Typing any other character for confirmation
causes the directory to be kept and kill stops.
It is not recommended to use the confirm mode when PUSHing.
.SKIP 2
.c;EXCEPT (DIRECTORY) <DIRECTORY-NAME>
.skip 1
 This command tells KILL to kill all directories in the specification
EXCEPT the one(s) listed with EXCEPT.  Wildcards can be used in the
directory specification to keep entire classes.
This command is identical to the KEEP command, except that input is from the terminal.
You may use more than one EXCEPT command per killing.
.SKIP 2
.c;EXIT (TO MONITOR)
.skip 1
 This causes KILL to exit to the monitor with no killing. You may reenter your previous
status with a "@START" command.
.SKIP 2
.c;KEEP (DIRECTORIES IN FILE) FILE-NAME
.skip 1
 This command causes KILL to read in directories from a disk file and
do EXCEPT's with them. They may contain wildcards. More than one KEEP command
can be used in a killing. See the EXCEPT command.
.SKIP 2
.c;KILL (SPECIFICATION IS) <WILDCARD>
.skip 1
 This command changes the wildcard specification for KILL to use when
killing directories. See the examples below
.SKIP 2
.c;LIST (DELETED DIRECTORIES ON FILE) FILE-NAME
.skip 1
 All deleted directories will be listed on the specified file. This command
is required for safety if no KILL command has been given.
.SKIP 2
.c;NOTIFY (LINE) LINE NUMBER
.skip 1
 When KILL has completed killing,
it can optionally notify a terminal by its octal
line number that it has finished.
This command is handy when a user wishes to run
KILL on a separate terminal, and do work on another.
.SKIP 2
.c;PUSH (COMMAND LEVEL AND KILL)
.skip 1
 This command is identical to BEGIN except that it also PUSHes a command level at the same time
while running, to allow a user to
do work while KILL runs.
.SKIP 2
.c;TEST (KILLING MODE)
.skip 1
 This command causes KILL to enter a test mode, where all directories will NOT
be killed, but simulated. In this mode, KILL is harmless. (There is no way to
reverse this command except by restarting the program). This mode is handy
for testing which directories would be killed in a real kill, without actually
killing. This command is also useful for getting familiar with KILL.
.c;EXAMPLES:
.skip 1
 The user wishes to delete a class consisting of ps:<0510> and all of its subdirectories:
.nf
@ENABLE
$RUN KILL
KILL>KILL <0510*>
KILL>LIST TTY:
KILL>BEGIN
[CONFIRM WITH CTRL-Y]_^Y
KILLING STARTED ON.......
..........
KILLING COMPLETED ON......
10 DIRECTORIES KILLED.....
 The user wishes to delete all directories except those listed in file DIRS.TXT:
KILL>KEEP DIRS.TXT
KILL>LIST KILL.TXT
KILL>PUSH
CONFIRM ....
TOPS-20 COMMAND LEVEL.....
 The user wishes to kill all directories on PS: except those in a file
KEEP.DIR. He wishes to run a test run first on the lineprinter to make sure
he does not kill a directory he needs:
KILL>TEST (KILLING MODE)
KILL>KEEP KEEP.DIR
KILL>LIST LPT:
KILL>BEGIN
....
